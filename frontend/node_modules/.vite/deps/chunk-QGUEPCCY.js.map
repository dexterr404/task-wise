{
  "version": 3,
  "sources": ["../../@mui/utils/esm/useForkRef/useForkRef.js", "../../@mui/material/esm/utils/useForkRef.js", "../../@mui/utils/esm/useEventCallback/useEventCallback.js"],
  "sourcesContent": ["'use client';\r\n\r\nimport * as React from 'react';\r\n\r\n/**\r\n * Merges refs into a single memoized callback ref or `null`.\r\n *\r\n * ```tsx\r\n * const rootRef = React.useRef<Instance>(null);\r\n * const refFork = useForkRef(rootRef, props.ref);\r\n *\r\n * return (\r\n *   <Root {...props} ref={refFork} />\r\n * );\r\n * ```\r\n *\r\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\r\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\r\n */\r\nexport default function useForkRef(...refs) {\r\n  const cleanupRef = React.useRef(undefined);\r\n  const refEffect = React.useCallback(instance => {\r\n    const cleanups = refs.map(ref => {\r\n      if (ref == null) {\r\n        return null;\r\n      }\r\n      if (typeof ref === 'function') {\r\n        const refCallback = ref;\r\n        const refCleanup = refCallback(instance);\r\n        return typeof refCleanup === 'function' ? refCleanup : () => {\r\n          refCallback(null);\r\n        };\r\n      }\r\n      ref.current = instance;\r\n      return () => {\r\n        ref.current = null;\r\n      };\r\n    });\r\n    return () => {\r\n      cleanups.forEach(refCleanup => refCleanup?.());\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n  return React.useMemo(() => {\r\n    if (refs.every(ref => ref == null)) {\r\n      return null;\r\n    }\r\n    return value => {\r\n      if (cleanupRef.current) {\r\n        cleanupRef.current();\r\n        cleanupRef.current = undefined;\r\n      }\r\n      if (value != null) {\r\n        cleanupRef.current = refEffect(value);\r\n      }\r\n    };\r\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n}", "'use client';\r\n\r\nimport useForkRef from '@mui/utils/useForkRef';\r\nexport default useForkRef;", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport useEnhancedEffect from \"../useEnhancedEffect/index.js\";\r\n\r\n/**\r\n * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892\r\n * See RFC in https://github.com/reactjs/rfcs/pull/220\r\n */\r\n\r\nfunction useEventCallback(fn) {\r\n  const ref = React.useRef(fn);\r\n  useEnhancedEffect(() => {\r\n    ref.current = fn;\r\n  });\r\n  return React.useRef((...args) =>\r\n  // @ts-expect-error hide `this`\r\n  (0, ref.current)(...args)).current;\r\n}\r\nexport default useEventCallback;"],
  "mappings": ";;;;;;;;;;;AAEA,YAAuB;AAiBR,SAAR,cAA+B,MAAM;AAC1C,QAAM,aAAmB,aAAO,MAAS;AACzC,QAAM,YAAkB,kBAAY,cAAY;AAC9C,UAAM,WAAW,KAAK,IAAI,SAAO;AAC/B,UAAI,OAAO,MAAM;AACf,eAAO;AAAA,MACT;AACA,UAAI,OAAO,QAAQ,YAAY;AAC7B,cAAM,cAAc;AACpB,cAAM,aAAa,YAAY,QAAQ;AACvC,eAAO,OAAO,eAAe,aAAa,aAAa,MAAM;AAC3D,sBAAY,IAAI;AAAA,QAClB;AAAA,MACF;AACA,UAAI,UAAU;AACd,aAAO,MAAM;AACX,YAAI,UAAU;AAAA,MAChB;AAAA,IACF,CAAC;AACD,WAAO,MAAM;AACX,eAAS,QAAQ,gBAAc,aAAa,CAAC;AAAA,IAC/C;AAAA,EAEF,GAAG,IAAI;AACP,SAAa,cAAQ,MAAM;AACzB,QAAI,KAAK,MAAM,SAAO,OAAO,IAAI,GAAG;AAClC,aAAO;AAAA,IACT;AACA,WAAO,WAAS;AACd,UAAI,WAAW,SAAS;AACtB,mBAAW,QAAQ;AACnB,mBAAW,UAAU;AAAA,MACvB;AACA,UAAI,SAAS,MAAM;AACjB,mBAAW,UAAU,UAAU,KAAK;AAAA,MACtC;AAAA,IACF;AAAA,EAGF,GAAG,IAAI;AACT;;;ACxDA,IAAO,qBAAQ;;;ACDf,IAAAA,SAAuB;AAQvB,SAAS,iBAAiB,IAAI;AAC5B,QAAM,MAAY,cAAO,EAAE;AAC3B,4BAAkB,MAAM;AACtB,QAAI,UAAU;AAAA,EAChB,CAAC;AACD,SAAa,cAAO,IAAI;AAAA;AAAA,KAEvB,GAAG,IAAI,SAAS,GAAG,IAAI;AAAA,GAAC,EAAE;AAC7B;AACA,IAAO,2BAAQ;",
  "names": ["React"]
}
